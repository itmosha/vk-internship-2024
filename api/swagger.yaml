components:
  schemas:
    Actor:
      properties:
        birth_date:
          type: string
        gender:
          type: boolean
        id:
          type: integer
        name:
          type: string
      type: object
    ActorCreateBody:
      properties:
        birth_date:
          type: string
        gender:
          type: boolean
        name:
          type: string
      type: object
    ActorReplaceBody:
      properties:
        birth_date:
          type: string
        gender:
          type: boolean
        name:
          type: string
      type: object
    ActorUpdateBody:
      properties:
        birth_date:
          type: string
        gender:
          type: boolean
        name:
          type: string
      type: object
    ActorWithFilms:
      properties:
        birth_date:
          type: string
        films_ids:
          items:
            type: integer
          type: array
        gender:
          type: boolean
        id:
          type: integer
        name:
          type: string
      type: object
    Film:
      properties:
        description:
          type: string
        id:
          type: integer
        rating:
          type: integer
        release_date:
          type: string
        title:
          type: string
      type: object
    FilmCreateBody:
      properties:
        actors_ids:
          items:
            type: integer
          type: array
        description:
          type: string
        rating:
          type: integer
        release_date:
          type: string
        title:
          type: string
      type: object
    FilmReplaceBody:
      properties:
        actors_ids:
          items:
            type: integer
          type: array
        description:
          type: string
        rating:
          type: integer
        release_date:
          type: string
        title:
          type: string
      type: object
    FilmUpdateBody:
      properties:
        actors_ids:
          items:
            type: integer
          type: array
        description:
          type: string
        rating:
          type: integer
        release_date:
          type: string
        title:
          type: string
      type: object
    FilmWithActors:
      properties:
        actors_ids:
          items:
            type: integer
          type: array
        description:
          type: string
        id:
          type: integer
        rating:
          type: integer
        release_date:
          type: string
        title:
          type: string
      type: object
    RequestError:
      properties:
        message:
          type: string
      type: object
    User:
      properties:
        id:
          type: integer
        is_admin:
          type: boolean
        username:
          type: string
      type: object
    UserLoginBody:
      properties:
        username:
          type: string
      type: object
    UserLoginResponse:
      properties:
        access_token:
          type: string
      type: object
    UserRegisterBody:
      properties:
        username:
          type: string
      type: object
  securitySchemes:
    JWT:
      description: Your JWT token
      scheme: bearer
      type: http
info:
  description: A simple REST API for working with films and actors data.
  title: Film Library API
  version: 1.0.0
openapi: 3.0.0
paths:
  /api/actors:
    get:
      description: ' Get all actors.'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorWithFilms'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Get all actors
      tags:
      - Actors
  /api/actors/:
    post:
      description: ' Create a new actor.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Create actor
      tags:
      - Actors
  /api/actors/{id}:
    delete:
      description: ' Delete an actor by id.'
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Delete actor
      tags:
      - Actors
  /api/actors/{id}/:
    patch:
      description: ' Update an actor by id.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorUpdateBody'
        required: true
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Update actor
      tags:
      - Actors
    put:
      description: ' Replace an actor by id.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorReplaceBody'
        required: true
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Replace actor
      tags:
      - Actors
  /api/auth/login/:
    post:
      description: ' Log in a user.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Login
      tags:
      - Users
  /api/auth/register/:
    post:
      description: ' Register a new user.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Register
      tags:
      - Users
  /api/films:
    get:
      description: ' Get all films with seaching and sorting params.'
      parameters:
      - description: Sort by field
        in: query
        name: sort_by
        required: true
        schema:
          description: Sort by field
          format: string
          type: string
      - description: Sort order
        in: query
        name: sort_order
        required: true
        schema:
          description: Sort order
          format: string
          type: string
      - description: Search by title
        in: query
        name: title
        required: true
        schema:
          description: Search by title
          format: string
          type: string
      - description: Search by actor name
        in: query
        name: actor_name
        required: true
        schema:
          description: Search by actor name
          format: string
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilmWithActors'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Get all films
      tags:
      - Films
  /api/films/:
    post:
      description: ' Create a new film.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Create film
      tags:
      - Films
  /api/films/{id}:
    delete:
      description: ' Delete a film by id.'
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Delete film
      tags:
      - Films
  /api/films/{id}/:
    patch:
      description: ' Update a film by id.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmUpdateBody'
        required: true
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Update film
      tags:
      - Films
    put:
      description: ' Replace a film by id.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmReplaceBody'
        required: true
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: ""
      summary: Replace film
      tags:
      - Films
security:
- Authorization: []
servers:
- description: Default Server URL
  url: /
